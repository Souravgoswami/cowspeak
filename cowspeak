#!/usr/bin/env ruby

help = ->() {
puts <<EOF
Hi, my name is cowspeak-web. I speak a quote on your terminal. I can read quote of the day from brainyquote.com as well.
In that case, If there is no internet connection, then I tell a fortune quote.

Usage: Run me directly from the command line with ruby interpreter or with your shell, I will show you a fortune with no aruguments:
		1. ruby #{__FILE__}
		2. chmod 777 #{__FILE__}
	    	    ./#{__FILE__}

	Pass me some arguments:
		Available arguments are:
			--web or -w                       Show the quote of the day from brainyquote.com
			--text= or -t=                    Display a custom text.
			--file= or -f=                     Specify the ASCII file path to display your own ASCII art.
			--help or -h                       Display this help.
			--art or -a                          Display a tutorial on adding your own art.
			--update or -u                   Update fortune database from Github.

		Examples:

			To get brainyquote.com's quote of the day:
				#{__FILE__} --web / #{__FILE__} -w

			For custom text:
				cowspeak --text='text' / #{__FILE__} -t='text'

			To display your own ASCII art:
				#{__FILE__} --file='path/file.art'

			To get brainyquote.com's quote of the day with custom art:
				#{__FILE__} --web --file=directory/file.art

			To display your own art with your text:
				#{__FILE__} --file=directory/file.art --text='your text'

			NOTE: --web with --text or -w with -t will only show quote from brainyquote.com, and not both.

	Help:
		#{__FILE__} -h or --help for this help message.

	Creating Custom Art:
		You can make your own art. Run #{__FILE__} --art or #{__FILE__} -a for more information.

	Update Fortune Database:
		This is just an extra feature. Update synchronizes your fortunes.data with https://raw.githubusercontent.com/bmc/fortunes/master/fortunes.
		You need not to update the database for months. It's fine if you never update the database. There are many fun inside the provided database.
		However, if the database gets deleted, run #{__FILE__} --update or #{__FILE__} -u. You can occasionally run an update - won't harm anything.
EOF
exit! 0
}

if ARGV.include?('--art') or ARGV.include?('-a')
puts <<EOF
You can create your own art. Here's a short introduction on how to do that:
	1. Create an empty document in your computer with 'art' extension (myart.art).
	2. Edit the document and Type your name in the first line. If you copy someone's work, provide the artist's name.
		For example:
			\033[05mCreated by #{('aaa'..'zzz').to_a.sample}man.\033[0m
	3. Leave one more empty line after your name.
	4. Type your characters and draw your ASCII art.
		Format: What you've done should looks like this:

\033[4mLine Number\033[0m			\033[4mArt\033[0m

\033[7;34m1\033[0m			\033[5mThanks to #{('aaaa'..'zzzz').to_a.sample} for this art\033[0m
\033[7;34m2\033[0m
\033[7;34m3\033[0m 			\033[5m-------------------------\033[0m
\033[7;34m4\033[0m 			\033[5m=			=\033[0m
\033[7;34m5\033[0m 			\033[5m=    Your ASCII Art	=\033[0m
\033[7;34m6\033[0m 			\033[5m=			=\033[0m
\033[7;34m7\033[0m 			\033[5m-------------------------\033[0m

	- You can copy and paste other's arts, just follow the above rules.
	- For more examples, look at other files.
	- You can use other files. By default they are located in cowspeak_files/arts/
	- To use your custom art, just run #{__FILE__} --file='your_art.art'
	- If it's located in another directory then #{__FILE__} --file='directory/your_art.art'
EOF
exit! 0
end

help.call if ARGV.include?('--help') or ARGV.include?('-h')
if ARGV.include?('--update') or ARGV.include?('-u')
	begin
		require 'net/http'
		data = Net::HTTP.get(URI('https://raw.githubusercontent.com/bmc/fortunes/master/fortunes')).chomp
		unless data.include?('404: Not Found')
			file = File.open('cowspeak_files/fortunes.data', 'w')
			file.puts(data)
			file.close
			warn "The fortunes have been updated."
			exit! 0
		else
			warn "Sorry for the inconvenience. The site doesn't seem to be valid anymore."
			warn "If the problem persists, contact: souravgoswami@protonmail.com."
			warn "#{__FILE__} can get an update. For the time being, stick with the current database you have, please..."
			exit! 100
		end
	rescue SocketError
		warn 'Do you have an internet connection?'
		warn "1. Exit.\n2. Retry.\nDefault: 1 (Exit)."
		case STDIN.gets.to_i
			when 2 then retry
			else exit! 65
		end
		exit! 127
	end
end

begin
	count, i, init, init_length = 0, 0, "â‰¡" * (%x(tput cols).to_i/2), (%x(tput cols ).to_i/2)
	arg1, arg2 = [], []
	arg1 = ARGV[0].split('=').map(&:chomp) unless ARGV[0].nil?
	arg2 = ARGV[1].split('=').map(&:chomp) unless ARGV[1].nil?

	if %w(--file -f).include? arg1[0] then file = arg1[1]
		elsif %w(--file -f).include? arg2[0] then file = arg2[1]
		else file = "cowspeak_files/arts/#{%w(cow.art squirrels.art killer_squirrels.art).sample}"
	end
	unless File.file?(file)
		warn 'Looks like the art file doesn\'t exist'
		warn "Type #{__FILE__} --help or #{__FILE__} -h for help"
		warn "Type #{__FILE__} --art or #{__FILE__} -a for help regarding art"
		exit! 127
	end

	if ARGV.include?('--web') or ARGV.include?('-w')
		begin
			require 'net/http'
			data = Net::HTTP.get(URI('https://www.brainyquote.com/quote_of_the_day')).split("\n").map { |c| c if c.include? 'alt=' }
			text = data.compact[2].delete('"').gsub('&#39;', "'").scan(/ alt=([^>]*)/).join
		rescue Exception
			text = File.read('cowspeak_files/fortunes.data').split('%').sample.delete("\n")
		end
	elsif %w(--text -t).include? arg1[0] then text = arg1[1]
	elsif %w(--text -t).include? arg2[0] then text = arg2[1]
	else text = File.read('cowspeak_files/fortunes.data').split('%').sample.gsub("\n", ' ')
	end

	print ' //' + init + "\\\\\n"
	text.chars do |c|
		print count == 0 ? "|| #{c}" : "#{c}"
		count += 1
		i += 1
		if (count >= init_length - 10 and c == " ") or i == text.length or count == init_length
			print " " * (init_length - count + 1) + "||" + "\n"
			count = 0
		end
	end

	print ' \\\\' + init + "//\n"
	a = File.readlines(file)[2..-1]
	think = %w[. o O].sample
	puts "\033[5m", "  " * a.length + think * 3 + "\n" + "  " * a.length + think * 2 + "\n" + "  " * a.length + think + "\n", "\033[0m", a

rescue Exception => e
	warn "Uh oh! Sorry, #{__FILE__} Crashed."
	print "Select one of the following:
		1. Exit.
		2. Show the usage (#{__FILE__} -h)
		3. Show Error Details.
		4. Save Error Details to a Log File.
		- Default: 1 (Exit).
		-> Choose: "

	case STDIN.gets.to_i
		when 1 then exit!
		when 2 then help.call
		when 3 then warn e
		when 4 then
			log_file = File.open('log.txt', 'a+')
			log_file.puts("\n#{Time.new.strftime('Error on %D at %T')} => \n\t#{e}")
			warn 'The error has been written to log.txt file.'
			log_file.close
		default exit!
	end
end
