#!/usr/bin/env ruby
# Encoding: UTF-8
# Written by Sourav Goswami <souravgoswami@protonmail.com>
# MIT Licence

# For ROOT installation, set Root to true
ROOT = false

# Disable download of assets and other stuff
ROOT_DISABLE_DOWNLOAD = false

VERSION = "Cowspeak version 3.14"

# 1000.0 => MB, 1024 => MiB when using the --welcome or -w option.
UNIT = 1000.0

# Gradient colours that cowspeak uses
# Each colour is also reversed. For example,
# "f55 3eb" can show either f55 -> 3eb or 3eb -> f55
COLOURS = %q(
	55f 3eb
	f55 55f
	ff0 55f
	f55 55f 3eb
	fa0 55f 3eb
	1FA2FF 12D8FA A6FFCB
	FC466B 3F5EFB
	7F7FD5 86A8E7 91EAE4
	004FF9 FFF94C
	004FF9 FFF94C f55
	f55 004FF9 ff0
	f55 55f 0a0 ff0
).each_line.map { |x| x.split(' '.freeze) }.reject(&:empty?)

# Art to show by default
SELECTED_ANIMALS = %w(
	cow squirrels cat
	dog mouse diano bat
)

COLOURS.concat(COLOURS.map(&:reverse))

NEW_FEATURES = "\t1. Revamped colours\n\t2. Lots of styles as options\n\t3.Bug fixes."
# puts("\e[1;4mDebugging Purpose:\e[0m", 'New Features:', Kernel.eval(IO.readlines(__FILE__).find { |x| x.start_with?('NEW_FEATURES'.freeze) }.split(?=).drop(1).join(?=))) || exit!(0)

BASENAME = Process.argv0

if !ROOT
	PATH = "#{__dir__}/cowspeak_files"
	SOURCE_CODE = 'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak'
	MAN_PAGE = 'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/cowspeak.1.gz'
	MAN_PAGE_DIR = File.join(__dir__, 'cowspeak.1.gz')
else
	PATH = '/usr/share/cowspeak'
	SOURCE_CODE = 'https://raw.githubusercontent.com/Souravgoswami/cowspeak-root/master/Other%20Distributions/cowspeak'
	MAN_PAGE = 'https://raw.githubusercontent.com/Souravgoswami/cowspeak-root/master/latest-src/usr/share/man/man1/cowspeak.1.gz'
	MAN_PAGE_DIR = '/usr/share/man/man1/cowspeak.1.gz'
end

# Errors
ERR_FILE_NOT_FOUND = 127
ERR_BAD_FILE = 126
ERR_NO_INTERNET = 64
ERR_SITE_INACCESSIBLE = 63
ERR_DOWNLOAD_UNAVAILABLE = 62
ERR_NO_PERMISSION = 61
ERR_BAD_EXIT = 99

Kernel.class_exec { define_method(:then) { |&block| block === self } } unless defined?(Kernel.then)
Array.class_exec { define_method(:sum) { reduce(:+) } } unless [].respond_to?(:sum)
Integer.class_exec { define_method(:clamp) { |l, u| self < l ? l : self > u ? u : self } } unless 0.respond_to?(:clamp)
String.class_exec { define_method(:delete_suffix!) { |a| slice(-a.length..-1) == a ? replace(slice(0..-a.length.next)) : self } } unless ''.respond_to?(:delete_suffix!)

$-s, $-n, $_esc, $-v = ?\s.freeze, ?\n.freeze, ?\e.freeze, false

# Check if the output should be colourized, blinked, rotated each line, inverted, reversed, whether to display text and the art
check_args = proc { |*opts| opts.any?(&ARGV.method(:include?)).tap { opts.each { |x| ARGV.delete(x) } } }
coloured = !check_args.('--no-colour', '-nc')
display_text = !check_args.('--no-text', '-nt')
show_art = !check_args.('--no-art', '-na')

BLINK = check_args.('--blink', '-b')
BOLD = check_args.('--bold')
ITALIC = check_args.('--italic')
OVERLINE = check_args.('--overline')
UNDERLINE = check_args.('--underline')
STRIKETHROUGH = check_args.('--strikethrough')
DOUBLE_UNDERLINE = check_args.('--double-underline')

_col = ARGV.find { |x| x[/^--colour=(\h{3}|,|\h{6})*$/] }
if _col
	_cols = _col.split(?=)[1]

	if _cols
		_c = _cols.split(?,)
		COLOURS.replace([_c]) unless _c.empty? || _c.length < 2
	end
end

require 'io/console'
Terminal_Width = begin
	STDOUT.winsize[1].fdiv(1.5).ceil
rescue Errno::ENOTTY
	coloured, term_size = false, [24, 80].freeze
	IO.undef_method(:winsize)
	IO.define_method(:winsize) { term_size }
	STDOUT.winsize[1].fdiv(1.5).ceil
end

COLOUR_ENABLED = coloured

class String
	def gradient(*arg_colours, exclude_spaces: false, newline: true )
		style = nil

		if BOLD || ITALIC || UNDERLINE || BLINK || STRIKETHROUGH || DOUBLE_UNDERLINE || OVERLINE
			style = "\e["

			style << '1;'.freeze if BOLD
			style << '3;'.freeze if ITALIC
			style << '4;'.freeze if UNDERLINE
			style << '5;'.freeze if BLINK
			style << '9;'.freeze if STRIKETHROUGH
			style << '21;'.freeze if DOUBLE_UNDERLINE
			style << '53;'.freeze if OVERLINE

			style.chop!
			style << ?m.freeze
		end

		unless COLOUR_ENABLED
				return STDOUT.print style + self + "\e[0m" if style
				return STDOUT.print self
		end

		arg_colours.replace(['f55', '55f']) if arg_colours.empty?
		temp = ''
		flatten_colours = arg_colours.flatten

		raise ArgumentError, "Wrong numeber of colours (given #{flatten_colours.length}, expected minimum 2)" if flatten_colours.length < 2
		raise ArgumentError, "Given argument for colour is neither a String nor an Integer" if flatten_colours.any? { |x| !(x.is_a?(String) || x.is_a?(Integer)) }

		all_rgbs = flatten_colours.map!(&method(:hex_to_rgb))

		# r, g, b => starting r, g, b
		# r2, g2, b2 => stopping r, g, b
		r, g, b = *all_rgbs[0]
		r2, g2, b2 = *all_rgbs[1]
		rotate = all_rgbs.length > 2

		init = 38

		each_line do |c|
			temp << style if style

			_r, _g, _b = r, g, b
			chomped = !!c.chomp!(''.freeze)

			len = c.length
			n_variable = exclude_spaces ? c.delete("\t\s".freeze).length : len
			n_variable -= 1
			n_variable = 1 if n_variable < 1

			# colour operator, colour value
			r_op = r_val  = nil
			g_op = g_val = nil
			b_op = b_val = nil

			if r2 > r
				r_op, r_val = :+, r2.-(r).fdiv(n_variable)
			elsif r2 < r
				r_op, r_val = :-, r.-(r2).fdiv(n_variable)
			end

			if g2 > g
				g_op, g_val = :+, g2.-(g).fdiv(n_variable)
			elsif g2 < g
				g_op, g_val = :-, g.-(g2).fdiv(n_variable)
			end

			if b2 > b
				b_op, b_val = :+, b2.-(b).fdiv(n_variable)
			elsif b2 < b
				b_op, b_val = :-, b.-(b2).fdiv(n_variable)
			end

			# To avoid the value getting adding | subtracted from the initial character
			_r = _r.send(r_op, r_val * -1) if r_op
			_g = _g.send(g_op, g_val * -1) if g_op
			_b = _b.send(b_op, b_val * -1) if b_op

			i = -1
			while (i += 1) < len
				_c = c[i]

				if !exclude_spaces || (exclude_spaces && !(_c == ?\s.freeze || _c == ?\t.freeze))
					_r = _r.send(r_op, r_val) if r_op
					_g = _g.send(g_op, g_val) if g_op
					_b = _b.send(b_op, b_val) if b_op
				end

				r_to_i = _r.to_i
				g_to_i = _g.to_i
				b_to_i = _b.to_i

				f_r = r_to_i < 0 ? 0 : r_to_i > 255 ? 255 : r_to_i
				f_g = g_to_i < 0 ? 0 : g_to_i > 255 ? 255 : g_to_i
				f_b = b_to_i < 0 ? 0 : b_to_i > 255 ? 255 : b_to_i

				ret = "\e[#{init};2;#{f_r};#{f_g};#{f_b}m#{_c}"

				temp << ret
			end

			ret = if !c.empty?
				chomped ? "\e[0m\n".freeze : "\e[0m".freeze
			elsif chomped
				?\n.freeze
			end

			temp << ret

			if rotate
				all_rgbs.rotate!
				r, g, b = all_rgbs[0]
				r2, g2, b2 = all_rgbs[1]
			end
		end

		if(newline)
			STDOUT.puts(temp)
		else
			STDOUT.print(temp)
		end
	end

	def hex_to_rgb(hex)
		colour = hex && hex.dup.to_s || ''
		colour.strip!
		colour.downcase!
		colour[0] = ''.freeze if colour[0] == ?#.freeze

		# out of range
		oor = colour.scan(/[^a-f0-9]/)

		unless oor.empty?
			invalids = colour.chars.map { |x|
				oor.include?(x) ? "\e[1;31m#{x}\e[0m" : x
			}.join

			puts "Hex Colour ##{invalids} is Out of Range"
			raise ArgumentError
		end

		clen = colour.length
		if clen == 3
			colour.chars.map { |x| x.<<(x).to_i(16) }
		elsif clen == 6
			colour.chars.each_slice(2).map { |x| x.join.to_i(16) }
		else
			sli = clen > 6 ? 'too long'.freeze : clen < 3 ? 'too short'.freeze : 'invalid'.freeze
			raise ArgumentError, "Invalid Hex Colour ##{colour} (length #{sli})"
		end
	end

	def multi_gradient(*colours, exclude_spaces: false, newline: true)
		div = colours.length - 1
		ary = []
		div_1 = div - 1

		each_line { |l|
			_len = l.length.fdiv(div)
			len, c = _len.round, colours.dup
			counter, j = -1, 0
			ary.clear[0] = ''

			l.each_char { |x|
				counter += 1

				if counter == len && j < div_1
					counter, j = 0, j + 1
					ary[j] = ''
				end

				ary[j] << x
			}

			ary.each { |x|
				x.gradient(c[0], c[1], newline: false)
				c.rotate!
			}

		}

		puts if newline
	end

	private(:hex_to_rgb)
end

def Animate(str = 'Please Wait', &block)
	begin
		anim, str_size = %W(\xE2\xA0\x82 \xE2\xA0\x92 \xE2\xA0\xB2 \xE2\xA0\xB6), str.size
		t = Thread.new { loop while str_size.times { |i| print(" \e[2K#{anim.rotate![0]} #{str[0...i]}#{str[i].swapcase}#{str[i + 1..-1]}#{?..*((i + 1) % 4)}\r") || sleep(0.05) } }
		block.(self).tap { t.kill }.tap { print "\e[2K\r" }
	rescue Exception => e
		raise e
	ensure
		t&.kill
	end
end

help = ->(documentation = false) do
	_r = <<~EOF
		Hi, my name is #{BASENAME}. I speak a quote on your terminal.
		Usage: Run me from the command line without any arguments, and I will
		show you a fortune.

		\u2B22 All the Available arguments:
		\s\s\s\s--art or -a\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sDisplay a tutorial on adding your own art.
		\s\s\s\s--borderh=<ch>/-brh=<ch>\s\s\s\s\s\s\sHorizontal border character.
		\s\s\s\s--borderv=<ch>/-brv=<ch>\s\s\s\s\s\s\sVertical border character.
		\s\s\s\s--bubble=<text>/-bbl=<text>\s\s\s\sSpecify the character of speech balloons.
		\s\s\s\s--documentation/-d\s\s\s\s\s\s\s\s\s\s\s\s\sDisplay the documentation.
		\s\s\s\s--file=<path>/-f=<path>\s\s\s\s\s\s\s\sSpecify the path of your own ASCII art.
		\s\s\s\s--fill=<char>/-fc=<char>\s\s\s\s\s\s\sFill the quote area with a character.
		\s\s\s\s--help/-h\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sDisplay help.
		\s\s\s\s--net=<url>/-n=<url>\s\s\s\s\s\s\s\s\s\s\sRead data from a website (in curl format).
		\s\s\s\s--no-art/-na\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sDon't display the animal.
		\s\s\s\s--no-colour/-nc\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sDon't colourize the output.
		\s\s\s\s--no-text/-nt\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sDon't show any text, show the animal.
		\s\s\s\s--read=<file>/-r=<file>\s\s\s\s\s\s\s\sRead a file.
		\s\s\s\s--show-arts/-sa\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sShow arts in the default directory.
		\s\s\s\s--text=<text>/-t=<text>\s\s\s\s\s\s\s\sDisplay a custom text.
		\s\s\s\s--version/-v\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sDisplay the current #{__FILE__} version.
		\s\s\s\s--welcome/-w\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sShow some system details to the user.

		\u2B22 Other Notable Styles:
		\s\s\s\s--blink or -b\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sBlink the texts.
		\s\s\s\s--bold\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sBold the texts.
		\s\s\s\s--double-underline\s\s\s\s\s\s\s\s\s\s\s\s\sDouble underline texts.
		\s\s\s\s--italic\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sItalicize texts.
		\s\s\s\s--overline\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sOverline texts.
		\s\s\s\s--strikethrough\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sstrikethrough texts.
		\s\s\s\s--underline\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sunderline texts.
		\s\s\s\s--colour=hex1,hex2,hexN\s\s\s\s\s\s\s\sAdd N hex colours to texts.
		\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s(minimum 2 colours)
	EOF

	unless ROOT_DISABLE_DOWNLOAD
		_r << <<~EOF
			\n\u2B22 Update Cowspeak:
			\s\s\s\s--download/-dl\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sDownload missing files from Github.
			\s\s\s\s--force-update/-fu\s\s\s\s\s\s\s\s\s\s\s\s\sForcefully update even if current
			\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sversion is latest.
			\s\s\s\s--update/-u\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\sUpdate cowspeak if any update is
			\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\savailable.
		EOF
	end

	r = _r.split($-n)
	max_l = r.map(&:length).max

	r.each { |x|
		x.ljust(max_l).multi_gradient('f5a', '55f', '3eb', exclude_spaces: false)
	}

	exit! 0 unless documentation
end

if ARGV.include?('--documentation') || ARGV.include?('-d') || ARGV.include?('--manual') || ARGV.include?('-m')
	ARGV.delete('--documentation')
	ARGV.delete('-d')
	ARGV.delete('--manual')
	ARGV.delete('-m')

help.(true)
	doc_lines = <<~EOF.lines

		Examples:
			For custom text:
				cowspeak --text='text' / #{BASENAME} -t='text'

			To display your own ASCII art:
				#{BASENAME} --file='path/file.art'

			To display your own art with your text:
				#{BASENAME} --file=directory/file.art --text='your text'

			To read a file from the storage:
				#{BASENAME} --read='path/file.extension' or #{BASENAME} -r='path/file.extension'

			Pipe another program's output to cowspeak (also accepts arguments):
				echo hello | #{BASENAME}
				echo hello | #{BASENAME} --argument -short_argument

			To read from the internet in curl format:
				#{BASENAME} --net=http://www.example.net
				#{BASENAME} --net=http://www.example.net --argument -short_argument

		Help:
			#{BASENAME} -h or --help for the help message.
			#{BASENAME} -d or --documentation or --manual or -m for this documentation.

		Creating Custom Art:
			You can make your own art. Run #{BASENAME} --art or #{BASENAME} -a for more information.

		Update/Download all the files:
			If you are missing some files, then please take a moment to download all the files from Github.
			To do that, run:
				cowspeak --download or -dl

			It will download all the necessary files. This will download less than 400 KiB files from the internet.
			NOTE: This argument will write files to #{PATH}/ directory.
	EOF

	max_doc_len = doc_lines.map(&:length).max
	doc_lines.join.rstrip.ljust(max_doc_len).multi_gradient('3eb', '55f', 'f55', exclude_spaces: false)

	exit! 0
end

if ARGV.include?('--show-arts') || ARGV.include?('-sa')
	unless Dir.exist?(File.join(PATH, 'arts'))
		"Can't find #{File.join(PATH, 'arts')}. You may need to run -dl to download the files...\n".multi_gradient(*COLOURS.sample)
		exit!
	end

	Dir.entries(File.join(PATH, 'arts')).each_with_index { |file, i|
		next if file == ?..freeze || file == '..'.freeze

		_file = File.join(PATH, 'arts', file)
		_content = IO.read(_file)

		"\u2023 #{i + 1}\n#{_content}\nPath: #{_file}\n\n".multi_gradient(*COLOURS.sample)
	}

	exit 0
end

if ARGV.include?('--art') || ARGV.include?('-a')
	ARGV.delete('--art')
	ARGV.delete('-a')

	puts <<~EOF
		You can create your own art. Here's a short introduction on how to do that:
			1. Create an empty document in your computer with 'art' extension (myart.art).
			2. Edit the document and Type your name in the first line. If you copy someone's work, provide the artist's name.
				For example:
					\e[5mCreated by #{rand_name = rand(4..10).times.map { rand(97..122).chr }.join }.\e[0m
			3. The 2nd line is also for crediting. Leave both 1st and 2nd line empty if crediting is not required.
			4. Type your characters and draw your ASCII art.

			[The art should start from line 3]
				Format: What you've done should looks like this:

		\e[4mLine\e[0m				\e[4mArt\e[0m
		\e[7;34m1\e[0m			\e[5mThanks to #{rand_name} for this art\e[0m
		\e[7;34m2\e[0m			\e[5mCollected from example.net\e[0m
		\e[7;34m3\e[0m 			\e[5m-------------------------\e[0m
		\e[7;34m4\e[0m 			\e[5m=			=\e[0m
		\e[7;34m5\e[0m 			\e[5m=    	ASCII Art	=\e[0m
		\e[7;34m6\e[0m 			\e[5m=			=\e[0m
		\e[7;34m7\e[0m 			\e[5m-------------------------\e[0m

			-> For more examples, look at the other installed files.
			-> You can use other files as example. By default they are located in #{File.join(PATH, 'arts')}
			-> Run #{BASENAME} --show-arts or -sa to see all the files
			-> To use your custom art, just run #{BASENAME} --file='your_art.art'
			-> If it is located in another directory then #{BASENAME} --file='directory/your_art.art'
			=> The first 2 lines are for crediting, if you don't have to credit, then leave those lines empty.\n\n
	EOF
	exit! 0
end

# Take exceptions very very seriously. Handle them very gently.
exception_handle = ->(error) do
	"Uh oh! Sorry, #{BASENAME} has Encountered an Error: \n".multi_gradient(*COLOURS.sample)
	puts error.full_message

	exit!
end

if ARGV.include?('--help') || ARGV.include?('-h')
	ARGV.delete('--help')
	ARGV.delete('-h')
	help.call
end

# Check if force update is enabled
force_update = ARGV.include?('--force-update') || ARGV.include?('-fu')
ARGV.delete('--force-update')
ARGV.delete('-fu')

# Check for updates.
if (ARGV.include?('--update') || ARGV.include?('-u') || force_update) && !ROOT_DISABLE_DOWNLOAD
	ARGV.delete('--update')
	ARGV.delete('-u')

	begin
		require 'net/https'
		downloaded_data, raw_man_page = Animate('Looking for updates!') { [Net::HTTP.get(URI(SOURCE_CODE)), Net::HTTP.get(URI(MAN_PAGE))] }
		current_version = VERSION[/\d+.\d+/]
		"Current version: #{current_version}\n".multi_gradient(*COLOURS.sample)

	rescue SocketError, OpenSSL::SSL::SSLError
		"Can't get version info of cowspeak. Do you have an active internet connection?\n".multi_gradient(*COLOURS.sample)
		exit! ERR_NO_INTERNET

	rescue Interrupt, SignalException, SystemExit
		"The download was interrupted!\n".multi_gradient(*COLOURS.sample)
		exit!

	rescue Exception => e
		'Something weird happened while trying to contact the server.'.multi_gradient(*COLOURS.sample)
		exception_handle.(e)
	end

	download_version = downloaded_data.to_s.split($-n).find { |line| line.start_with?('VERSION') }.to_s[/\d+\.\d+/]
	new_version = download_version.to_f > current_version.to_f

	unless new_version || force_update
		"#{BASENAME} is up to date! Nothing to do.".multi_gradient(*COLOURS.sample)
	else
		"A new update is available.\nNew Version: #{download_version}".multi_gradient(*COLOURS.sample) if new_version
		Kernel.eval(downloaded_data.to_s.split($-n).find { |line| line.start_with?('NEW_FEATURES'.freeze) }.to_s.split(?=).drop(1).join(?=).to_s).multi_gradient(*COLOURS.sample)
		"#{new_version ? ?U : 'Reu'}pdate to version #{download_version}? (Y/n): ".multi_gradient(*COLOURS.sample, newline: false)
		begin
			exit! 0 if STDIN.gets.to_s.strip.downcase == ?n
		rescue Interrupt
			puts
			exit!
		end

		begin
			"Trying to update #{__FILE__}".multi_gradient(*COLOURS.sample)
			File.write(__FILE__, downloaded_data)
			"Updated #{__FILE__}".multi_gradient(*COLOURS.sample)
			ARGV << '--download'

		rescue Errno::EACCES
			"Permission Denied while trying to overwrite the contents of #{__FILE__}".multi_gradient(*COLOURS.sample)
			exit! ERR_NO_PERMISSION

		rescue Exception => e
			"Something wrong happened while trying to overwrite #{__FILE__}".multi_gradient(*COLOURS.sample)
			exception_handle.(e)
		end

		"Update the man page at #{MAN_PAGE_DIR}? (Y/n): ".multi_gradient(*COLOURS.sample, newline: false)

		unless STDIN.gets.to_s.strip.downcase == ?n
			begin
				"Trying to update #{MAN_PAGE_DIR}".multi_gradient(*COLOURS.sample)
				File.write(MAN_PAGE_DIR, raw_man_page)
				"Man page updated.".multi_gradient(*COLOURS.sample)

			rescue Errno::EACCES
				"Permission Denied while trying to overwrite the contents of #{__FILE__}".multi_gradient(*COLOURS.sample)
				exit! ERR_NO_PERMISSION

			rescue Exception => e
				"Something wrong happened while trying to overwrite #{__FILE__}".multi_gradient(*COLOURS.sample)
				exception_handle.(e)
			end
		end
	end
end

if !ROOT_DISABLE_DOWNLOAD && (ARGV.include?('--download') || ARGV.include?('-dl'))
	ARGV.delete('--download')
	ARGV.delete('-dl')

	unless STDIN.tty?
		"#{BASENAME} not running in a tty!".multi_gradient(*COLOURS.sample)
		"This can lead to problems...".multi_gradient(*COLOURS.sample)
		"Make sure you are running cowspeak in a terminal without any redirection.".multi_gradient(*COLOURS.sample)
		"Usage Example with -dl / --download: \n\t#{BASENAME} -dl / --download".multi_gradient(*COLOURS.sample)
		exit(0)
	end

	begin
		require 'net/https'
		"Download Data from the internet and save them into #{PATH}/?(Y/n): ".multi_gradient(*COLOURS.sample, newline: false)
		exit!(0) if STDIN.gets.to_s.strip.downcase == ?n

		unless File.exist?(PATH)
			Dir.mkdir(PATH)
			"Created directory #{PATH}".multi_gradient(*COLOURS.sample)
		end

		# The fortune database originally came from https://raw.githubusercontent.com/bmc/fortunes/master/fortunes

		Warning.warn "#{PATH} cannot be accesses. Please be root..." unless File.writable?(File.join(PATH))
		sleep 1
		data = Animate { Net::HTTP.get(URI('https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/fortunes.data')) }.to_s

		unless data.include?('404: Not Found')
			File.write(File.join(PATH, 'fortunes.data'), data)
			"The fortunes database has been downloaded and installed to #{PATH}fortunes.".multi_gradient(*COLOURS.sample)

			unless File.exist?(File.join(PATH, 'arts'))
				Dir.mkdir(File.join(PATH, 'arts'))
				"Created directory #{File.join(PATH, 'arts')}/".multi_gradient(*COLOURS.sample)
			end
			"Downloading art files...".multi_gradient(*COLOURS.sample)

			# Install the art files...
			write_to = %w(cow dolphin killer_squirrels penguin spider squirrels cat deer dog eagle hippo scorpion camel turtle mouse alligator bat diano)
			uris = write_to.map { |x| 'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/'.freeze + x + '.art' }

			raise RuntimeError, "Dear Developer, the uris has to match write_to size, line: #{__LINE__}" unless write_to.size == uris.size

			uris.size.times do |index|
				"Downloading art file from #{uris[index]}".multi_gradient(*COLOURS.sample)
				File.write("#{File.join(PATH, 'arts', write_to[index])}.art", Animate { Net::HTTP.get(URI(uris[index])) })
				"Successfully installed an art file in #{File.join(PATH, 'arts')}/".multi_gradient(*COLOURS.sample)
				"#{IO.read(File.join(PATH, 'arts', write_to[index]) + '.art')}".multi_gradient(*COLOURS.sample)
			end

			"Downloading the manual from #{MAN_PAGE}".multi_gradient(*COLOURS.sample)
			File.write(MAN_PAGE_DIR, Net::HTTP.get(URI(MAN_PAGE)))
			"Successfully downloaded the manual at #{MAN_PAGE_DIR}".multi_gradient(*COLOURS.sample)

			'All Done!'.multi_gradient(*COLOURS.sample)
			"To see the available arts, type: #{BASENAME} --show-arts or -sa".multi_gradient(*COLOURS.sample)
			"Here's a fortune for you!".multi_gradient(*COLOURS.sample)
		else
			"Sorry for the inconvenience. Something went terribly wrong (can't access one of the file).".multi_gradient(*COLOURS.sample)
			"If the problem persists, contact: souravgoswami@protonmail.com.".multi_gradient(*COLOURS.sample)
			exit! ERR_DOWNLOAD_UNAVAILABLE
		end

	rescue SocketError, OpenSSL::SSL::SSLError
		"Do you have an internet connection?".multi_gradient(*COLOURS.sample)
		"1. Exit.\n2. Retry.\nDefault: 1 (Exit).".multi_gradient(*COLOURS.sample)
		retry if STDIN.gets.to_i == 2
		exit! ERR_NO_INTERNET

	rescue Errno::EACCES
		"Requires root privilege to write to #{PATH}/ directory. Please run #{BASENAME} with proper permission.".multi_gradient(*COLOURS.sample)
		exit! ERR_NO_PERMISSION

	rescue SignalException, Interrupt, SystemExit
		"\nUh Oh! The download is interrupted!\n\n".multi_gradient(*COLOURS.sample)
		exit! ERR_BAD_EXIT

	rescue Exception => e
		exception_handle.(e)
	end
end

borderh = ARGV.select { |a| a.start_with?('--borderh=') || a.start_with?('-brh=') }[-1].then { |x| x ? x.split(?=)[1].to_s.chars.sample.to_s : ?= }
borderv = ARGV.select { |a| a.start_with?('--borderv=') || a.start_with?('-brv=') }[-1].to_s
borderv = borderv.empty? ? ?| : borderv.split(?=)[1].to_s.chars.sample.to_s

bubble = ARGV.select { |a| a.start_with?('--bubble=') || a.start_with?('-bbl=') }[-1].to_s.split(?=)[1] || ?o
fill_chars = ARGV.select { |a| a.start_with?('--fill=') || a.start_with?('-fc=') }[-1].to_s.split(?=)[1].then { |x| x ? x.chars.sample : $-s }

begin
	file = ARGV.select { |a| a.start_with?('--file=') || a.start_with?('-f=') }.each(&ARGV.method(:delete))

	if file[-1]
		file = if file[-1].split(?=)[1]
 			file[-1].split(?=)[1]
		else
			File.join(PATH, 'arts', "#{SELECTED_ANIMALS.sample}.art")
		end
	else
			file = File.join(PATH, 'arts', "#{SELECTED_ANIMALS.sample}.art")
	end

	unless File.file?(file) || !show_art
		"Looks like the art file doesn't exist.".multi_gradient(*COLOURS.sample)

		unless ROOT_DISABLE_DOWNLOAD
			"Type #{BASENAME} --download or #{BASENAME} -dl to download all the necessary files.".multi_gradient(*COLOURS.sample)
		else
			"Please make sure you have installed cowspeak correctly...".multi_gradient(*COLOURS.sample)
		end

		"Type #{BASENAME} --show-arts or #{BASENAME} -sa to see available arts in the default directory...".multi_gradient(*COLOURS.sample)
		"Type #{BASENAME} --help or #{BASENAME} -h for help.".multi_gradient(*COLOURS.sample)
		"Type #{BASENAME} --art or #{BASENAME} -a for help regarding art.".multi_gradient(*COLOURS.sample)
		print "\e[1m"
		"If you still want to run #{BASENAME} without the animals, use the -na or --no-art argument".multi_gradient(*COLOURS.sample)
		print "\e[0m"

		file = File.join(PATH, "arts/#{%w(cow squirrels killer_squirrels cat deer dog mouse camel).sample}.art")
		unless File.readable?(file)
			"The default files at location #{PATH + 'arts/'} doesn't exist".multi_gradient(*COLOURS.sample)
			"Please run #{BASENAME} -dl to download all the necessary files at #{PATH}".multi_gradient(*COLOURS.sample)
			exit! ERR_FILE_NOT_FOUND
		end
	end

	# Check if output is redicred from another program using pipes
	text = ''

	if !STDIN.tty?
		begin
			text.replace( STDIN.read.force_encoding('UTF-8').tap(&:rstrip!) )
		rescue Exception
		end
	elsif ARGV.include?('--version') || ARGV.include?('-v')
		ARGV.delete('--version')
		ARGV.delete('-v')
		text.replace(VERSION)
	elsif ARGV.include?('--welcome') || ARGV.include?('-w')
		require 'socket'

		user = ENV['USER'] ? $-s + ENV['USER'].to_s.split.map!(&:capitalize).join : ''
		logname = ENV['LOGNAME'] ? "\n:: Logname: #{ENV['LOGNAME']}" : ''
		hostname = Socket.gethostname ? "\n:: Hostname: #{Socket.gethostname}" : ''
		ssh_connection = ENV['SSH_CONNECTION']
		ssh_connection = ssh_connection ? "\n:: SSH: #{ssh_connection}" : ''

		local_ip = Socket.ip_address_list.detect { |intf| intf.ipv4_private? }.then { |x| x ? x.ip? ? "\n:: Local IP: #{x.ip_unpack[0]}" : '' : '' }
		_files = Dir.entries(Dir.pwd).reject { |x| x == ?..freeze || x == '..'.freeze }
		files = " (#{_files.count} items)" rescue ''

		os = if File.readable?('/etc/os-release')
			"\n:: OS: #{IO.foreach('/etc/os-release').find { |x| x.start_with?('NAME=') }.to_s.split(?=).drop(1).join(?=).tap(&:strip!).tap { |x| x.delete!(%<'">) }.then { |x| x ? "#{x} " : '' } }(#{RUBY_PLATFORM})"
		elsif File.readable?('/etc/lsb-release')
			"\n:: OS: #{IO.foreach('/etc/lsb-release').find { |x| x.start_with?('DISTRIB_DESCRIPTION=') }.to_s.split(?=).drop(1).join(?=).tap(&:strip!).tap { |x| x.delete!(%<'">) }.then { |x| x ? "#{x} " : '' } }(#{RUBY_PLATFORM})"
		else
			"\n:: OS: #{RUBY_PLATFORM}"
		end

		memory_stat = if File.readable?('/proc/meminfo')
			suffix = UNIT == 1000 ? 'MB' : 'MiB'
			memory = IO.foreach('/proc/meminfo').first(3)

			used = (((total = memory[0].split[1].to_f) - (memory[2].split[1].to_f))/UNIT).round(2)
			val = "\n:: Memory: #{(used).round(2)} #{suffix} / #{(total/UNIT).round(2)} #{suffix} (#{used.*(100)./(total./(UNIT)).round(2)}%)"
		else
			''
		end

		swap_stat = if File.readable?('/proc/swaps')
			suffix = UNIT == 1000 ? 'MB' : 'MiB'
			used, total = *IO.readlines('/proc/swaps').drop(1).map! { |x| x.strip.split.values_at(2, 3).map!(&:to_f) }
				.then { |x| [x.map(&:last).sum./(UNIT).round(2), x.map(&:first).sum./(UNIT).round(2)] }

			total == 0 ? '' : "\n:: Swap: #{used} #{suffix} / #{total} #{suffix} (#{used.*(100)./(total).round(2)}%)"
		else
			''
		end

		require 'etc'
		cpu_stat = if File.readable?('/proc/cpuinfo')
			cpu = IO.readlines('/proc/cpuinfo')

			val = "\n:: CPU: #{cpu.find { |x| x.start_with?('model name') }.to_s.split(?:).drop(1).join.tap(&:strip!)}"
			cpu_count = cpu.count { |x| x.start_with?('processor'.freeze) }.then { |x| x == Etc.nprocessors ? x : 0 }
			val.concat("\n   [Cores: #{cpu_count}]") unless cpu_count == 0
			val
		else
			Etc.nprocessors != 0 ? "\n:: CPU Cores: #{Etc.nprocessors}" : ''
		end

		cpu_usage = if File.readable?('/proc/stat'.freeze)
			data = IO.readlines('/proc/stat'.freeze).select { |x| x[/^cpu\d*/] }.map! { |x| x.split.map!(&:to_f) }
			Kernel.sleep(0.075)
			data2 = IO.readlines('/proc/stat'.freeze).select { |x| x[/^cpu\d*/] }.map! { |x| x.split.map!(&:to_f) }

			# On devices like android, the core count can change anytime (hotplugging).
			# I had crashes on Termux.
			# So better just count the min number of CPU and iterate over that
			# If data.length is smaller than data2.length, we don't have enough data to compare.
			dl, d2l = data.length, data2.length
			min = dl > d2l ? d2l : dl

			usages = min.times.reduce([]) do |ary, x|
				_user, nice, sys, idle, iowait, irq, softirq, steal = *data[x].drop(1)
				user2, nice2, sys2, idle2, iowait2, irq2, softirq2, steal2 = *data2[x].drop(1)

				idle_then, idle_now  = idle + iowait, idle2 + iowait2
				totald = idle_now.+(user2 + nice2 + sys2 + irq2 + softirq2 + steal2) - idle_then.+(_user + nice + sys + irq + softirq + steal)

				res = totald.-(idle_now - idle_then).fdiv(totald).abs.*(100)
				res = res.nan? ? 0.0 : res > 100 ? 100.0 : res.round(2)

				ary.push("#{'%05.2f' % res}%")
			end

			"\n:: Total CPU Usage: #{usages[0]}\n   [#{usages.drop(1).join(' | ')}]"
		else
			''
		end

		terminal_size = STDOUT.tty? ? STDOUT.winsize.then { |x| x.sum != 0 ? "\n:: Terminal Size: #{x.join(" \xC3\x97 ")}" : '' } : ''
		kernel_version = File.readable?('/proc/version') ? "\n:: Kernel: " + IO.read('/proc/version').split[2] : ''

		uptime = File.readable?('/proc/uptime') ? IO.read('/proc/uptime').to_i : 0
		up = "#{uptime.div(3600).then { |x| x != 1 ? "#{x} hours" : "#{x} hour" }}, "\
			"#{uptime.%(3600).div(60).then { |x| x != 1 ? "#{x} minutes" : "#{x} minute" } }, "\
			"#{uptime.%(60).then { |x| x != 1 ? "#{x} seconds" : "#{x} second" } }"

		running_processes = Dir['/proc/**'].select! { |x| File.split(x)[1].then { |y| y.to_i.to_s == y } }
		total_tasks, tasks_info = running_processes.size, ''
		sleeping_count = idle_count = running_count = zombies_count = 0

		running_processes.each do |x|
			status_file = File.join(x, 'status'.freeze)

			if File.readable?(status_file)
				status = IO.readlines(status_file)
				status1, status2 = status[2].split[1], status[1].split[1]

				running_count += 1 if status1 == ?R.freeze
				sleeping_count += 1 if status1 == ?S.freeze
				idle_count += 1 if status1 == ?I.freeze
				zombies_count += 1 if status2 == ?Z.freeze
			end
		end

		model = if File.readable?('/sys/devices/virtual/dmi/id/product_name')
			val1 = IO.read('/sys/devices/virtual/dmi/id/product_name').tap(&:strip!)
			val1.concat(" #{IO.read('/sys/devices/virtual/dmi/id/product_version').tap(&:strip!)}") if File.readable?('/sys/devices/virtual/dmi/id/product_version')
			"\n:: Model: #{val1}"
		elsif File.readable?('/sys/firmware/devicetree/base/model')
			"\n:: Model: #{IO.read('/sys/firmware/devicetree/base/model').tap(&:strip!)}"
		else
			''
		end

		bios_info = if File.readable?('/sys/devices/virtual/dmi/id/bios_vendor')
			val1 = IO.read('/sys/devices/virtual/dmi/id/bios_vendor').tap(&:strip!)
			val1.concat("(#{IO.read('/sys/devices/virtual/dmi/id/bios_version').tap(&:strip!)})") if File.readable?('/sys/devices/virtual/dmi/id/bios_version')
			"\n:: BIOS: #{val1}"
		else
			''
		end

		if running_processes.size > 0
			tasks_info << "\n:: Tasks: #{total_tasks}"

			if running_count + sleeping_count + idle_count + zombies_count > 0
				tasks_info.concat("\n   [")
				tasks_info.concat("Running #{running_count} | ") if running_count > 0
				tasks_info.concat("Sleeping #{sleeping_count} | ") if sleeping_count > 0
				tasks_info.concat("Idle #{idle_count} | ") if idle_count > 0
				tasks_info.concat("Zombies #{zombies_count} | ") if zombies_count > 0
				tasks_info.delete_suffix!(" | ").concat(?])
			end
		end

		battery_path = '/sys/class/power_supply/BAT0'.freeze
		battery_details = if Dir.exist?(battery_path)
			bat_model = IO.read(File.join(battery_path, 'model_name')).strip! rescue 'Unknown Model'
			bat_manufacturer = IO.read(File.join(battery_path, 'manufacturer')).strip! rescue ''
			bat_tech = IO.read(File.join(battery_path, 'technology')).strip! rescue ''
			bat_status = IO.read(File.join(battery_path, 'status')).strip! rescue ''
			bat_percentage = IO.read(File.join(battery_path, 'charge_now')).to_i.*(100.0)./(IO.read(File.join(battery_path, 'charge_full')).to_i).to_i rescue -1

			val = "\n:: Battery: #{bat_model}#{bat_manufacturer.empty? ? '' : " (#{bat_manufacturer})"}#{bat_tech.empty? ? '' : " (#{bat_tech})"}"
			val.concat("\n   [Charge: #{bat_percentage}%#{bat_status.empty? ? '' : bat_status != 'Unknown' ? " | #{bat_status}" : ' | ...'}]") if bat_percentage > -1
			val
		end

		session = ENV['DESKTOP_SESSION'] ? "\n:: Desktop Session: #{ENV['DESKTOP_SESSION']}" : ''
		text = <<~EOF.tap(&:rstrip!)
				>> Welcome#{user}!#{model}#{bios_info}#{logname}#{hostname}#{ssh_connection}#{local_ip}#{session}#{os}#{kernel_version}#{cpu_stat}#{cpu_usage}#{memory_stat}#{swap_stat}
				:: Uptime: #{up}#{tasks_info}
				:: Shell: #{ENV['SHELL']}
				:: PWD: #{Dir.pwd}/#{files}#{terminal_size}#{battery_details}
				:: Date & Time: #{Time.new.strftime('%B %d, %A, %H:%M:%S %p')}
		EOF

	else
		t = ARGV.select { |x| x.start_with?('--text='.freeze) || x.start_with?('-t='.freeze) }.each(&ARGV.method(:delete))

		text.replace(
			if t.empty?
				if File.readable?(File.join(PATH, "fortunes.data"))
					IO.read(File.join(PATH, "fortunes.data")).force_encoding('UTF-8').split("\n%\n").sample.to_s.gsub($-n, $-s).tap(&:strip!)
				elsif display_text
					"The fortune file doesn't exist.\n\tPlease run #{BASENAME} -dl to download the files to #{PATH}"
				else
					""
				end
			else
				t[-1].to_s.split(?=)[1] || ''
			end
		)

		read = ARGV.select { |r| r.start_with?('--read=') || r.start_with?('-r=') }.each(&ARGV.method(:delete))

		unless read.empty?
			f = read[-1].split(?=)[1].to_s
			text.replace( IO.read(f).force_encoding('UTF-8').tap(&:rstrip!) ) if File.readable?(f)
		end

		net = ARGV.select { |n| n.start_with?('--net=') || n.start_with?('-n=') }
		net.each(&ARGV.method(:delete))

		unless net.empty?
			uri = net[-1].split(?=)[1].to_s.strip

			begin
				%w(net/https open-uri).each(&method(:require))
				text = Animate("Downloading data from #{uri}") { URI.send(:open, uri).read.strip }

			rescue SocketError, OpenSSL::SSL::SSLError
				"Failed to read the URL. Do you have an active internet connection?".multi_gradient(*COLOURS.sample)
				exit! ERR_NO_INTERNET

			rescue SystemExit, Interrupt
				show_art = true
				print "\n\n"

			rescue Errno::ENOENT
				"No such file #{uri}... If you are trying to open a link, don't forget to mention the protocol...".multi_gradient(*COLOURS.sample)
				"For example, https://www.example.net".multi_gradient(*COLOURS.sample)
				"To open a file, you can use --read=<path> or --net=<path>".multi_gradient(*COLOURS.sample)
				exit! ERR_FILE_NOT_FOUND

			rescue Exception
				"Sorry an error occurred while trying to open #{uri}".multi_gradient(*COLOURS.sample)
				"Failed to open the URL. Have you mentioned the protocol?".multi_gradient(*COLOURS.sample)
				"Example:\n\thttp://www.example.net".multi_gradient(*COLOURS.sample)
				exit! ERR_SITE_INACCESSIBLE
			end
		end
	end

	corners, all_chars = (borderh.empty? || borderv.empty?) ? Array.new(4) { $-s } : [' //', '\\\\', ' \\\\', '//'], ''

	if show_art && display_text
		text.prepend($-s).gsub!(?\t, $-s * 4)

		count, init, init_length, init_length_lower = 0, borderh * Terminal_Width, Terminal_Width - 1, Terminal_Width - 9
		all_chars.concat("#{corners[0]}#{init}#{corners[1]}\n #{borderv}")

		i, text_chars = -1, text.chars

		while c = text_chars[i += 1]
			unless (count >= init_length_lower && c == $-s) || count >= init_length || c == $-n || c == $_esc
				all_chars << c
			else
				all_chars << (c.==($-n).|(c == $_esc) ? fill_chars : c) << fill_chars * (init_length - count + 2) + borderv + "\n #{borderv} ".freeze
				count = 0
			end

			count += c.bytes.length./(2).then { |x| x == 0 ? 1 : x }
		end

		all_chars.concat(fill_chars * (init_length - count + 3) + borderv)
		animal = IO.readlines(file).drop(2)

		unless animal
			"The art file #{File.zero?(file) ? 'looks empty' : 'is not properly formatted' }. Run cowspeak --art to get help regarding art.".multi_gradient(*COLOURS.sample)
			exit! ERR_BAD_FILE
		end

		max_length = animal.map(&:length).max / 2

		(all_chars + $-n + corners[2] + init + corners[3] + $-n +
			$-s * max_length + bubble * 3 + "\n\s" + $-s * max_length + bubble * 2 + $-n + $-s * max_length + bubble + $-n + animal.join)
				.multi_gradient(*COLOURS.sample, newline: false)

	elsif show_art
		IO.readlines(file).drop(2).join.multi_gradient(*COLOURS.sample)
	elsif display_text
		text.multi_gradient(*COLOURS.sample)
	end

rescue SystemExit, Interrupt, SignalException
	abort $-n * 2
rescue Exception => e
	exception_handle.(e)
end
