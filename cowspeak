#!/usr/bin/ruby -w
# Written by Sourav Goswami
# Cowspeak version 1.7
# The GNU General Public License v3.0

# Set the path where to look for files and download (--download or -d) the new cowspeak files
PATH = "#{Dir.pwd}/cowspeak_files/"

# Set the path if root, comment the previous path
# PATH = "/usr/share/cowspeak/"

STDIN.sync, STDOUT.sync = true, true
coloured, blink = true, false

# Check if the output should colourized
if ARGV.include?('--no-colour') || ARGV.include?('-nc')
	ARGV.delete('--no-colour')
	ARGV.delete('-nc')
	coloured = false
end

# Check if the output should be blinked
if ARGV.include?('--blink') || ARGV.include?('-b')
	ARGV.delete('--blink')
	ARGV.delete('-b')
	blink = true
end

# Check if the colour should be rotated in each line
rotate_colour = false
if ARGV.include?('--rotate-colour')  || ARGV.include?('-rc')
	ARGV.delete('--rotate_colour')
	ARGV.delete('-rc')
	rotate_colour = true
end

chars = ->(string) do
	if coloured
		characters = string.split("\n")
		selected_colours = [(196..200), (202..207), (208..213), (82..87), (40..45), (214..219),
		(112..117), (142..147), (46..51), (208..213)].sample.to_a

		selected_colour_array = [selected_colours, selected_colours.reverse].sample

		for c in characters
			index = 0
			clength, arr_len = c.length, selected_colour_array.length
			clength.times do |i|
				index += 1 if (i % (clength/arr_len) == 0) unless (i == 0 || i ==  1 || clength <= arr_len || c[i] == " " || index >= arr_len - 1)

				STDOUT.print "\033[5m" if blink
				STDOUT.print("\033[38;5;#{selected_colour_array[index]}m#{c[i]}")
			end
			STDOUT.puts
			selected_colour_array.rotate! if rotate_colour
		end
	else
		STDOUT.print "\033[5m" if blink
		STDOUT.print string, "\n"
	end
	STDOUT.print("\033[0m")
end

# Exit if no tty is detected
unless STDOUT.tty?
	chars.call("Sorry, No terminal found...")
	chars.call("Run this is a proper terminal (gnome-terminal, xfce4-terminal, konsole, terminology, terminator, terminix, xterm, and so on...)")
	chars.call("Also make sure you have ncurses installed (required for calculating number of columns to draw the output)")
	chars.call("Thank you for downloading #{__FILE__.split('/').last}. Run #{__FILE__.split('/').last} --help or #{__FILE__.split('/').last} -h for more details")
	exit 156
end

# Don't run the program if the terminal width is too small (atleast 32 is needed for default arts)
until %x(tput cols).to_i > 31
	sleep 0.1
	printf "\033[H\033[J"
	chars.call('The terminal is too narrow. Please make it bigger')
end

help = ->{
chars.call(
"Hi, my name is cowspeak. I speak a quote on your terminal.

Usage: Run me from the command line without any arguments, and I will show you a fortune.

Pass me some arguments:
	Available arguments are:
	--art or -a                     Display a tutorial on adding your own art.
	--blink or -b			Blink the texts (not supported in all terminals yet).
	--documentation or -d           Display the whole documentation including this help.
	--download or -dl		Download missing files and database from Github.
	--file= or -f=			Specify the ASCII file path to display your own ASCII art.
	--help or -h                    Display this help.
	--manual or -m                  Display a manual. Same as documentation.
	--no-art or -na			Don't display the animal.
	--net -r -n			Get data from a webisite (in curl format).
	--no-colour or -nc		Don't colourize the output.
	--read or -r=                   Read a file.
	--rotate-colour or -rc		Rotate the output colours in each line.
	--text= or -t=                  Display a custom text.

This is the help page, for more help with examples, run #{__FILE__} --documentation or #{__FILE__} -d")
exit! 0
}

if ARGV.include?('--documentation') || ARGV.include?('-d') || ARGV.include?('--manual') || ARGV.include?('-m')
ARGV.delete('--documentation')
ARGV.delete('-d')
ARGV.delete('--manual')
ARGV.delete('-m')

chars.call(
"Hi, my name is cowspeak. I speak a quote on your terminal.

Usage: Run me from the command line without any arguments, and I will show you a fortune.

Pass me some arguments:
	Available arguments are:
	--art or -a                     Display a tutorial on adding your own art.
	--blink or -b			Blink the texts (not supported in all terminals yet).
	--documentation or -d           Display the whole documentation including this help.
	--download or -dl		Download missing files and database from Github.
	--file= or -f=			Specify the ASCII file path to display your own ASCII art.
	--help or -h                    Display this help.
	--manual or -m                  Display a manual. Same as documentation.
	--net -r -n			Get data from a webisite (in curl format).
	--no-art or -na			Don't display the animal.
	--no-colour or -nc		Don't colourize the output.
	--read or -r=                   Read a file.
	--rotate-colour or -rc		Rotate the output colours in each line.
	--text= or -t=                  Display a custom text.

		Examples:
			For custom text:
				cowspeak --text='text' / #{__FILE__} -t='text'

			To display your own ASCII art:
				#{__FILE__} --file='path/file.art'

			To display your own art with your text:
				#{__FILE__} --file=directory/file.art --text='your text'

			To read a file from the storage:
				#{__FILE__} --read='path/file.extension' or #{__FILE__} -r='path/file.extension'

			Pipe another program's output to cowspeak (also accepts arguments):
				echo hello | #{__FILE__}
				echo hello | #{__FILE__} --argument -short_argument

			To read from the internet in curl format:
				#{__FILE__} --net=http://www.example.net
				#{__FILE__} --net=http://www.example.net --argument -short_argument

	Help:
		#{__FILE__} -h or --help for the help message.
		#{__FILE__} -d or --documentation or --manual or -m for this documentation.
	Creating Custom Art:
		You can make your own art. Run #{__FILE__} --art or #{__FILE__} -a for more information.
	Update Download all the files:
		If you are missing some files, then please take a moment to download all the files from Github.
		To do that, run:
			cowspeak --download or -d
			It will download all the necessary files. This will download less than 400 KiB files from the internet.
			NOTE: This argument will write files to #{PATH} directory.
				     This may need root privilege to do that.")
exit! 0
end

# Show a user friendly tutorial on how to add arts
if ARGV.include?('--art') || ARGV.include?('-a')
ARGV.delete('--art')
ARGV.delete('-a')
puts "
You can create your own art. Here's a short introduction on how to do that:
	1. Create an empty document in your computer with 'art' extension (myart.art).
	2. Edit the document and Type your name in the first line. If you copy someone's work, provide the artist's name.
		For example:
			\033[5mCreated by #{('aaa'..'zzz').to_a.sample}man.\033[0m
	3. Leave one more empty line after your name.
	4. Type your characters and draw your ASCII art.
		Format: What you've done should looks like this:

\033[4mLine Number\033[0m			\033[4mArt\033[0m

\033[7;34m1\033[0m			\033[5mThanks to #{('aaaa'..'zzzz').to_a.sample} for this art\033[0m
\033[7;34m2\033[0m
\033[7;34m3\033[0m 			\033[5m-------------------------\033[0m
\033[7;34m4\033[0m 			\033[5m=			=\033[0m
\033[7;34m5\033[0m 			\033[5m=    Your ASCII Art	=\033[0m
\033[7;34m6\033[0m 			\033[5m=			=\033[0m
\033[7;34m7\033[0m 			\033[5m-------------------------\033[0m

	- You can copy and paste other's arts, just follow the above rules.
	- For more examples, look at other files.
	- You can use other files. By default they are located in #{PATH}/arts/
	- To use your custom art, just run #{__FILE__} --file='your_art.art'
	- If it is located in another directory then #{__FILE__} --file='directory/your_art.art'
"
exit! 0
end

# Take exceptions very very seriously. Handle them very gently.
exception_handle = ->(error) {
	chars.call "Uh oh! Sorry, #{__FILE__} has Encountered an Error."
	chars.call("Select one of the following:
		1. Exit.
		2. Show the usage (#{__FILE__} -h)
		3. Show Error Details.
		4. Save Error Details to a Log File.
		5. Contact Developer.
		- Default: 1 (Exit).")
		print("\t\t\033[5m->\033[0m Choose: ")

	case STDIN.gets.to_i
		when 2 then help.call
		when 3 then chars.call(error.to_s) ; exit! 125
		when 4
			File.open('/tmp/cowspeak-log.txt', 'a+') do |log_file|
				log_file.puts("\n#{Time.new.strftime('Error on %D at %T')} => \n\t#{error}")
				chars.call('The error has been written to /tmp/cowspeak-log.txt')
			end
			exit! 128
		when 5
			chars.call('Please contact <souravgoswami@protonmail.com>')
			chars.call("Tell him about #{error} in #{__FILE__}")
		else exit! 127
	end
}

if ARGV.include?('--help') || ARGV.include?('-h')
	ARGV.delete('--help')
	ARGV.delete('-h')
	help.call
end

if ARGV.include?('--download') || ARGV.include?('-dl')
	ARGV.delete('--download')
	ARGV.delete('-dl')

	begin
		require 'net/http'

		unless File.exist?(PATH)
			Dir.mkdir(PATH)
			chars.call "Created directory #{PATH}"
		end

		data = Net::HTTP.get(URI('https://raw.githubusercontent.com/bmc/fortunes/master/fortunes'))
		unless data.include?('404: Not Found')
			File.open(PATH + "fortunes.data", 'w') { |file| file.puts(data) }
			chars.call "The fortunes database has been downloaded and installed to #{PATH}/fortunes."

			unless File.exist?(PATH + "arts")
				Dir.mkdir(PATH + "arts")
				chars.call "Created directory #{PATH}arts/"
			end

			chars.call "Downloading art files..."

			# Install the art files...
			uris = [
				'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/cow.art',
				'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/dolphin.art',
				'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/killer_squirrels.art',
				'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/penguin.art',
				'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/spider.art',
				'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/squirrels.art'
				]

			write_to = %w(cow dolphin killer_squirrels penguin spider squirrels)

			raise IOError, "Developer, the uris has to match write_to size, line: #{__LINE__}" unless write_to.size == uris.size

			uris.each_with_index do |uri, index|
				data = Net::HTTP.get(URI(uri))
				File.open("#{PATH + "arts/" + write_to[index]}.art", 'w') { |file| file.write(data) }
				chars.call "\nSuccessfully installed an art file in #{PATH}cowspeak_files/arts/\n#{data.split("\n")[0]}"
			end

			chars.call "All Done, Please Restart the Application"

			exit! 0
		else
			chars.call "Sorry for the inconvenience. Something went terribly wrong (can't access one of the file)."
			chars.call "If the problem persists, contact: souravgoswami@protonmail.com."
			exit! 100
		end

	rescue SocketError
		chars.call 'Do you have an internet connection?'
		chars.call "1. Exit.\n2. Retry.\nDefault: 1 (Exit)."

		retry if STDIN.gets.to_i == 2

		exit! 2

	rescue Errno::EACCES
		chars.call "Requires root privilege to download and access #{PATH} directory. Please run it with proper permission."
		exit!

	rescue Exception => e
		exception_handle.call(e)
	end
end

show_art = true
if ARGV.include?('--no-art') || ARGV.include?('-na')
	ARGV.delete('--no-art')
	ARGV.delete('-na')
	show_art = false
end

begin
	file = ARGV.select { |a| a.start_with?('--file') || a.start_with?('-f') }
	file.each do |arg| ARGV.delete(arg) end

	unless file[-1].nil?
		if file[-1].split('=')[1]
			unless file.empty? then file = file[-1].split('=')[1]
				else file = PATH + "arts/#{%w(cow.art squirrels.art killer_squirrels.art).sample}" end
		else
				file = PATH + "arts/#{%w(cow.art squirrels.art killer_squirrels.art).sample}"
		end
	else
			file = PATH + "arts/#{%w(cow.art squirrels.art killer_squirrels.art).sample}"
	end

	unless File.file?(file)
		chars.call 'Looks like the art file doesn\'t exist'
		chars.call "Type #{__FILE__} --download or #{__FILE__} -d to download all the necessary files."
		chars.call "Type #{__FILE__} --help or #{__FILE__} -h for help."
		chars.call "Type #{__FILE__} --art or #{__FILE__} -a for help regarding art."
		exit! 127
	end

	text = ''
	pipe = false

	# Check if pipe and output is redicred from another program, waste no time on gets if not
	require 'timeout'
	begin
		Timeout::timeout 0.0000000000000000000000001 do pipe = STDIN.gets end
	rescue Timeout::Error
	end

	# if pipe is passed, read it until it ends. Else, read fortunes.
	if pipe
		text += pipe
		loop do
			val = STDIN.gets
			break if val.nil?
			text += val
		end
	end

	if text.empty?
		text = ARGV.select { |t| t.start_with?('--text=') || t.start_with?('-t=') }
		text.each do |arg| ARGV.delete(arg) end

		unless text.empty? then text= text[-1].split('=')[1] end
		text = File.read(PATH + "fortunes.data").split("\n%\n").sample if text.nil? || text.empty?

		read = ARGV.select { |r| r.start_with?('--read=') || r.start_with?('-r=') }
		read.each do |arg| ARGV.delete(arg) end

		unless read.empty?
			f = read[-1].split('=')[1]
			text = File.read(f) if File.exist?(f) unless f.nil?
		end

		net = ARGV.select { |n| n.start_with?('--net=') || n.start_with?('-n=') }
		net.each do |arg| ARGV.delete(arg) end

		unless net.empty?
			uri = net[-1].split('=')[1]
			unless uri.nil?
				begin
					require 'net/http'
					text = Net::HTTP.get(URI(uri))
				rescue Errno::ECONNREFUSED
					chars.call "Failed to open the URL. Please Make sure you have mentioned the protocol"
					chars.call "Example:\n\thttp://www.example.net"
					exit! 1
				rescue SocketError
					chars.call "Failed to read the URL. Please make sure you have an active internet connection."
					exit! 2
				rescue Exception
					chars.call "Sorry an error occurred while trying to open #{uri}"
					exit! 126
				end
			end
		end
	end

	all_chars = ''

	if show_art
		text = text.gsub("\n", ' ')
		count, i, init, init_length = 0, 0, "=" * (%x(tput cols).to_i/2), (%x(tput cols ).to_i/2)
		all_chars += ' //' + init + "\\\\\n"
		text.each_char do |c|
			all_chars += count == 0 ? "|| #{c}" : "#{c}"
			count += 1
			i += 1
			if (count >= init_length - 10 and c == " ") || i == text.length || count == init_length
				all_chars += " " * (init_length - count + 1) + "||" + "\n"
				count = 0
			end
		end

		all_chars += ' \\\\' + init + "//\n"
		a = File.readlines(file)[2..-1]
		think = %w[. o O].sample
		all_chars += "  " * a.length + think * 3 + "\n" + "  " * a.length + think * 2 + "\n" + "  " * a.length + think + "\n" + a.join
	else
		all_chars = text
	end

	chars.call(all_chars)

rescue Exception => e
	exception_handle.call(e)
end
