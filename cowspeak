#!/usr/bin/env ruby
# Encoding: UTF-8
# Written by Sourav Goswami <souravgoswami@protonmail.com>
# The GNU General Public License v3.0

# TARGET can either be [non-zero number] for local installation [0] for root installation
TARGET = 1

VERSION = "Cowspeak version 2.60"

# 1000.0 => MB, 1024 => MiB when using the --welcome or -w option.
UNIT = 1000.0

BASENAME = File.basename(__FILE__)
NEW_FEATURES = "\t1. Fixed several bugs!\n\t2. Cowspeak now works outside TTY with a predefined term size 40x40\n\t   and disabled colour.\n\t3. Shows Running and Zombie processes in welcome screen.\n\t4. Shows % in the welcome screen.\n\t5. Other minor performance improvements."
# puts('Debugging Purpose:', 'New Features:', Kernel.eval(IO.readlines(__FILE__).find { |x| x.start_with?('NEW_FEATURES'.freeze) }.split(?=).drop(1).join)) || exit!(0)

PATH, SOURCE_CODE, MAN_PAGE, MAN_PAGE_DIR = if TARGET != 0
	[ "#{Dir.pwd}/cowspeak_files", 'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak',
	'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/cowspeak.1.gz', File.join(Dir.pwd, 'cowspeak.1.gz') ]
else
	[ '/usr/share/cowspeak', 'https://raw.githubusercontent.com/Souravgoswami/cowspeak-deb/master/cowspeak/usr/bin/cowspeak',
	'https://raw.githubusercontent.com/Souravgoswami/cowspeak-deb/master/cowspeak/usr/share/man/man1/cowspeak.1.gz', '/usr/share/man/man1/cowspeak.1.gz' ]
end

# Errors
ERR_NO_TTY = 128
ERR_FILE_NOT_FOUND = 127
ERR_BAD_FILE = 126
ERR_NO_INTERNET = 64
ERR_SITE_INACCESSIBLE = 63
ERR_DOWNLOAD_UNAVAILABLE = 62
ERR_NO_PERMISSION = 61
ERR_BAD_EXIT = 99
ERR_DIAGNOSED = 100

Kernel.class_exec { define_method(:then) { |&block| block === self } } unless defined?(Kernel.then)
Array.class_exec { define_method(:sum) { reduce(:+) } } unless [].respond_to?(:sum)

$-s, $-n, $-v = ?\s.freeze, ?\n.freeze, nil

# Check if the output should be colourized, blinked, rotated each line, inverted, reversed, whether to display text and the art
check_args = proc { |*opts| opts.any?(&ARGV.method(:include?)).tap { opts.each { |x| ARGV.delete(x) } } }
coloured, blink, rotate_colour = !check_args.('--no-colour', '-nc'), check_args.('--blink', '-b'), check_args.('--rotate-colour', '-rc')
invert, reverse, display_text, show_art = check_args.('--invert', '-inv'), check_args.('--reverse', '-rev'), !check_args.('--no-text', '-nt'), !check_args.('--no-art', '-na')

require 'io/console'
Terminal_Width = begin
	STDOUT.winsize[1].fdiv(1.5).ceil
rescue Errno::ENOTTY
	coloured, term_size = false, [40, 40].freeze
	IO.undef_method(:winsize)
	IO.define_method(:winsize) { term_size }
	STDOUT.winsize[1].fdiv(1.5).ceil
end

# Let's make one colour array here so it won't get created everytime in the 'chars' stabby lambda...
all_colours = [40..45, 196..201, 208..213, 28..33].freeze
other_colours = [[154, 184, 208, 203, 198, 164, 129, 92], [63, 33, 39, 44, 49, 83, 118]].freeze

colour_sets = all_colours.+(other_colours).map! { |i| i.to_a.tap { |x| x.concat(x.reverse) } }.tap { |cs| cs.concat(all_colours.map { |i| i.to_a.reverse.tap { |x| x.concat(x.reverse) } }) }
available_colours = [[154, 184, 208, 203, 198, 164, 129, 92], [63, 33, 39, 44, 49, 83, 118]].concat(colour_sets).tap { |ac| ac.concat(ac.map(&:reverse)) }

colourize = proc do |string|
	string = string.reverse!.concat($-n) if invert
	enum = reverse ? string.each_line.reverse_each : string.each_line

	if coloured
		temp, selected_colour_array = '', available_colours.sample
		STDOUT.print "\e[5m" if blink

		enum.each do |c|
			clength, arr_len = c.length, selected_colour_array.size
			div, index, i, arr_len = clength.div(arr_len).then { |x| x == 0 ? 1 : x }, 0, -1, arr_len - 1

			while i < clength
				index += 1 if ((i += 1) % div == 0 && index < arr_len) && i > 1
				temp.concat("\e[38;5;#{selected_colour_array[index]}m#{c[i]}\e[0m")
			end

			selected_colour_array = available_colours.rotate![0] if rotate_colour
		end

		STDOUT.print(temp)
	else
		STDOUT.print "\e[5m" if blink
		STDOUT.print enum.to_a.join
	end
end

def Animate(str = 'Please Wait', &block)
	begin
		anim, str_size = %W(\xE2\xA0\x82 \xE2\xA0\x92 \xE2\xA0\xB2 \xE2\xA0\xB6), str.size
		t = Thread.new { loop while str_size.times { |i| print(" \e[2K#{anim.rotate![0]} #{str[0...i]}#{str[i].swapcase}#{str[i + 1..-1]}#{?..*((i + 1) % 4)}\r") || sleep(0.05) } }
		block.(self).tap { t.kill }.tap { print "\e[2K\r" }
	rescue Exception => e
		raise e
	ensure
		t&.kill
	end
end

help = ->(documentation = false) do
	rotate_colour, arg_count = true, 0

	colourize.(
		<<~EOF.each_line.map { |el| (el.lstrip.start_with?(?-) || el.lstrip.start_with?('--')) ? "#{arg_count += 1}\t#{el}" : el }.join.rstrip.concat($-n)
			Hi, my name is #{BASENAME}. I speak a quote on your terminal.
			Usage: Run me from the command line without any arguments, and I will show you a fortune.

			All the Available arguments:
			  --art or -a                   Display a tutorial on adding your own art.
			  --blink or -b			Blink the texts.
			  --borderh=<ch>/-brh=<ch> 	Horizontal border character.
			  --borderv=<ch>/-brv=<ch>	Vertical border character.
			  --bubble=<text>/-bbl=<text> 	Specify the character of speech balloons.
			  --documentation/-d        	Display the documentation.
			  --download/-dl		Download missing files from Github.
			  --file=<path>/-f=<path>	Specify the path of your own ASCII art.
			  --fill=<char>/-fc=<char>	Fill the quote area with a character.
			  --force-update/-fu		Forcefully update (also see --update)
			  --help/-h                 	Display help.
			  --invert/-inv			Invert the output (right <- left in English)!
			  --manual/-m                	Display a manual. Same as documentation.
			  --net=<url>/-n=<url>		Read data from a website (in curl format).
			  --no-art/-na			Don't display the animal.
			  --no-colour/-nc		Don't colourize the output.
			  --no-text/-nt			Don't show any text, show the animal.
			  --read=<file>/-r=<file>	Read a file.
			  --reverse/-rev		Cowspeak reads upside down!
			  --rotate-colour/-rc		Rotate the output colours in each line.
			  --show-arts/-sa		Show arts in the default directory.
			  --text=<text>/-t=<text>	Display a custom text.
			  --version/-v			Display the current #{__FILE__} version.
			  --update/-u			Update cowspeak if possible.
			  --welcome/-w			Show some system details to the user.\n\n
		EOF
	)
	exit! 0 unless documentation
end

if ARGV.include?('--documentation') || ARGV.include?('-d') || ARGV.include?('--manual') || ARGV.include?('-m')
	ARGV.delete('--documentation')
	ARGV.delete('-d')
	ARGV.delete('--manual')
	ARGV.delete('-m')

help.(true)
	colourize.(<<~EOF

		Examples:
			For custom text:
				cowspeak --text='text' / #{BASENAME} -t='text'

			To display your own ASCII art:
				#{BASENAME} --file='path/file.art'

			To display your own art with your text:
				#{BASENAME} --file=directory/file.art --text='your text'

			To read a file from the storage:
				#{BASENAME} --read='path/file.extension' or #{BASENAME} -r='path/file.extension'

			Pipe another program's output to cowspeak (also accepts arguments):
				echo hello | #{BASENAME}
				echo hello | #{BASENAME} --argument -short_argument

			To read from the internet in curl format:
				#{BASENAME} --net=http://www.example.net
				#{BASENAME} --net=http://www.example.net --argument -short_argument

		Help:
			#{BASENAME} -h or --help for the help message.
			#{BASENAME} -d or --documentation or --manual or -m for this documentation.

		Creating Custom Art:
			You can make your own art. Run #{BASENAME} --art or #{BASENAME} -a for more information.

		Update/Download all the files:
			If you are missing some files, then please take a moment to download all the files from Github.
			To do that, run:
				cowspeak --download or -dl

			It will download all the necessary files. This will download less than 400 KiB files from the internet.
			NOTE: This argument will write files to #{PATH}/ directory.
	EOF
	)

	exit! 0
end

if ARGV.include?('--show-arts') || ARGV.include?('-sa')
	Dir.entries(File.join(PATH, 'arts')).drop(2).each_with_index { |file, i| colourize.("\xE2\x80\xA3 #{i + 1}\n#{IO.read(File.join(PATH, 'arts', file))}\nPath: #{File.join(PATH, 'arts', file)}\n\n") }
	exit! 0
end

if ARGV.include?('--art') || ARGV.include?('-a')
	ARGV.delete('--art')
	ARGV.delete('-a')

	puts <<~EOF
		You can create your own art. Here's a short introduction on how to do that:
			1. Create an empty document in your computer with 'art' extension (myart.art).
			2. Edit the document and Type your name in the first line. If you copy someone's work, provide the artist's name.
				For example:
					\e[5mCreated by #{rand_name = rand(4..10).times.map { rand(97..122).chr }.join }.\e[0m
			3. The 2nd line is also for crediting. Leave both 1st and 2nd line empty if crediting is not required.
			4. Type your characters and draw your ASCII art.

			[The art should start from line 3]
				Format: What you've done should looks like this:

		\e[4mLine\e[0m				\e[4mArt\e[0m
		\e[7;34m1\e[0m			\e[5mThanks to #{rand_name} for this art\e[0m
		\e[7;34m2\e[0m			\e[5mCollected from example.net\e[0m
		\e[7;34m3\e[0m 			\e[5m-------------------------\e[0m
		\e[7;34m4\e[0m 			\e[5m=			=\e[0m
		\e[7;34m5\e[0m 			\e[5m=    	ASCII Art	=\e[0m
		\e[7;34m6\e[0m 			\e[5m=			=\e[0m
		\e[7;34m7\e[0m 			\e[5m-------------------------\e[0m

			-> For more examples, look at the other installed files.
			-> You can use other files as example. By default they are located in #{File.join(PATH, 'arts')}
			-> Run #{BASENAME} --show-arts or -sa to see all the files
			-> To use your custom art, just run #{BASENAME} --file='your_art.art'
			-> If it is located in another directory then #{BASENAME} --file='directory/your_art.art'
			=> The first 2 lines are for crediting, if you don't have to credit, then leave those lines empty.\n\n
	EOF
	exit! 0
end

# Take exceptions very very seriously. Handle them very gently.
exception_handle = ->(error) do
	colourize.call "Uh oh! Sorry, #{BASENAME} has Encountered an Error.\n"
	colourize.call <<~EOF
		Select one of the following:
		1. Exit.
		2. Show the usage (#{BASENAME} -h)
		3. Show Error Details.
		4. Save Error Details to a Log File.
		5. Contact Developer.
		-> Choose (Default 1):
	EOF

	case STDIN.gets.to_i
		when 2 then help.call
		when 3 then puts(error.full_message + $-n)
		when 4
			open('/tmp/cowspeak-log.txt', 'a+') do |log_file|
				log_file.puts("\n#{Time.new.strftime('Error on %D at %T')} => \n\t#{error}\n#{error.backtrace.join($-n)}\n\n")
				puts(colourize.('The error has been written to /tmp/cowspeak-log.txt'))
			end
		when 5
			colourize.("Please contact <souravgoswami@protonmail.com>\n")
			colourize.("Notify us about:\n#{error}\n#{error.backtrace.join($-n)} in #{BASENAME}\n")
	end
	exit! ERR_DIAGNOSED
end

if ARGV.include?('--help') || ARGV.include?('-h')
	ARGV.delete('--help')
	ARGV.delete('-h')
	rotate_colour = true
	help.call
end

# Check if force update is enabled
force_update = ARGV.include?('--force-update') || ARGV.include?('-fu')
ARGV.delete('--force-update')
ARGV.delete('-fu')

# Check for updates.
if ARGV.include?('--update') || ARGV.include?('-u') || force_update
	ARGV.delete('--update')
	ARGV.delete('-u')

	begin
		require 'net/https'
		downloaded_data, raw_man_page = Animate('Looking for updates!') { [Net::HTTP.get(URI(SOURCE_CODE)), Net::HTTP.get(URI(MAN_PAGE))] }
		current_version = VERSION[/\d+.\d+/]
		puts colourize.("Current version: #{current_version}")

	rescue SocketError, OpenSSL::SSL::SSLError
		puts colourize.call "Can't get version info of cowspeak. Do you have an active internet connection?"
		exit! ERR_NO_INTERNET

	rescue Interrupt, SignalException, SystemExit
		puts
		puts colourize.('The download was interrupted!')
		exit!

	rescue Exception => e
		puts colourize.call 'Something weird happened while trying to contact the server.'
		exception_handle.(e)
	end

	download_version = downloaded_data.to_s.split($-n).find { |line| line.start_with?('VERSION') }.to_s[/\d+\.\d+/]
	new_version = download_version.to_f > current_version.to_f

	unless new_version || force_update
		puts colourize.call "#{BASENAME} is up to date! Nothing to do."
	else
		puts colourize.call "A new update is available." if new_version
		puts colourize.("New Version: #{download_version}\n")

		puts(colourize.(Kernel.eval(downloaded_data.to_s.split($-n).find { |line| line.start_with?('NEW_FEATURES'.freeze) }.to_s.split(?=).drop(1).join.to_s)))
		puts

		colourize.call "#{new_version ? ?U : 'Reu'}pdate to version #{download_version}? (Y/n): "
		begin
			exit! 0 if STDIN.gets.to_s.strip.downcase == ?n
		rescue Interrupt
			puts
			exit!
		end

		begin
			puts colourize.call "Trying to update #{__FILE__}"
			File.write(__FILE__, downloaded_data)
			puts colourize.call "Updated #{__FILE__}"
			ARGV << '--download'

		rescue Errno::EACCES
			puts colourize.("Permission Denied while trying to overwrite the contents of #{__FILE__}")
			exit! ERR_NO_PERMISSION

		rescue Exception => e
			puts colourize.call "Something wrong happened while trying to overwrite #{__FILE__}"
			exception_handle.(e)
		end

		colourize.call "Update the man page at #{MAN_PAGE_DIR}? (Y/n): "

		unless STDIN.gets.to_s.strip.downcase == ?n
			begin
				puts colourize.call "Trying to update #{MAN_PAGE_DIR}"
				File.write(MAN_PAGE_DIR, raw_man_page)
				puts colourize.call "Man page updated."

			rescue Errno::EACCES
				puts colourize.("Permission Denied while trying to overwrite the contents of #{__FILE__}")
				exit! ERR_NO_PERMISSION

			rescue Exception => e
				puts colourize.call "Something wrong happened while trying to overwrite #{__FILE__}"
				exception_handle.(e)
			end
		end
	end
end

if ARGV.include?('--download') || ARGV.include?('-dl')
	ARGV.delete('--download')
	ARGV.delete('-dl')

	begin
		require 'net/https'
		colourize.("Download Data from the internet and save them into #{PATH}/?(Y/n): ")
		exit!(0) if STDIN.gets.to_s.strip.downcase == ?n

		unless File.exist?(PATH)
			Dir.mkdir(PATH)
			colourize.call "Created directory #{PATH}\n"
		end

		# The fortune database originally came from https://raw.githubusercontent.com/bmc/fortunes/master/fortunes

		Warning.warn "#{PATH} cannot be accesses. Please be root..." unless File.writable?(File.join(PATH))
		sleep 1
		data = Animate { Net::HTTP.get(URI('https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/fortunes.data')) }.to_s

		unless data.include?('404: Not Found')
			File.write(File.join(PATH, 'fortunes.data'), data)
			colourize.call "The fortunes database has been downloaded and installed to #{PATH}fortunes.\n"

			unless File.exist?(File.join(PATH, 'arts'))
				Dir.mkdir(File.join(PATH, 'arts'))
				colourize.call "Created directory #{File.join(PATH, 'arts')}/\n"
			end
			puts colourize.call "Downloading art files...\n"

			# Install the art files...
			write_to = %w(cow dolphin killer_squirrels penguin spider squirrels cat deer dog eagle hippo scorpion camel turtle mouse)
			uris = write_to.map { |x| 'https://raw.githubusercontent.com/Souravgoswami/cowspeak/master/cowspeak_files/arts/'.freeze + x + '.art' }

			raise RuntimeError, "Dear Developer, the uris has to match write_to size, line: #{__LINE__}" unless write_to.size == uris.size

			uris.size.times do |index|
				puts colourize.("Downloading art file from #{uris[index]}")
				File.write("#{File.join(PATH, 'arts', write_to[index])}.art", Animate { Net::HTTP.get(URI(uris[index])) })
				puts colourize.call "Successfully installed an art file in #{File.join(PATH, 'arts')}/"
				puts colourize.call "#{IO.read(File.join(PATH, 'arts', write_to[index]) + '.art')}\n"
			end

			puts colourize.call "Downloading the manual from #{MAN_PAGE}"
			File.write(MAN_PAGE_DIR, Net::HTTP.get(URI(MAN_PAGE)))
			puts colourize.call "Successfully downloaded the manual at #{MAN_PAGE_DIR}"

			puts colourize.call 'All Done!'
			puts colourize.call "To see the available arts, type: #{BASENAME} --show-arts or -sa"
			puts colourize.call "Here's a fortune for you!"
		else
			colourize.call "Sorry for the inconvenience. Something went terribly wrong (can't access one of the file).\n"
			colourize.call "If the problem persists, contact: souravgoswami@protonmail.com.\n"
			exit! ERR_DOWNLOAD_UNAVAILABLE
		end

	rescue SocketError, OpenSSL::SSL::SSLError
		colourize.call "Do you have an internet connection?\n"
		colourize.call "1. Exit.\n2. Retry.\nDefault: 1 (Exit).\n"
		retry if STDIN.gets.to_i == 2
		exit! ERR_NO_INTERNET

	rescue Errno::EACCES
		colourize.call "Requires root privilege to write to #{PATH}/ directory. Please run #{BASENAME} with proper permission.\n"
		exit! ERR_NO_PERMISSION

	rescue SignalException, Interrupt, SystemExit
		colourize.call "\nUh Oh! The download is interrupted!\n\n\n"
		exit! ERR_BAD_EXIT

	rescue Exception => e
		exception_handle.(e)
	end
end

borderh = ARGV.select { |a| a.start_with?('--borderh=') || a.start_with?('-brh=') }[-1].then { |x| x ? x.split(?=)[1].to_s.chars.sample.to_s : ?= }
borderv = ARGV.select { |a| a.start_with?('--borderv=') || a.start_with?('-brv=') }[-1].to_s
borderv = borderv.empty? ? ?| : borderv.split(?=)[1].to_s.chars.sample.to_s

bubble = ARGV.select { |a| a.start_with?('--bubble=') || a.start_with?('-bbl=') }[-1].to_s.split(?=)[1].then { |x| x ? x : ?o }
fill_chars = ARGV.select { |a| a.start_with?('--fill=') || a.start_with?('-fc=') }[-1].to_s.split(?=)[1].then { |x| x ? x.chars.sample : $-s }

begin
	file = ARGV.select { |a| a.start_with?('--file=') || a.start_with?('-f=') }.each(&ARGV.method(:delete))

	if file[-1]
		file = if file[-1].split(?=)[1]
 			file[-1].split(?=)[1]
		else
			File.join(PATH, 'arts', "#{%w(cow squirrels killer_squirrels cat deer dog mouse camel).sample}.art")
		end
	else
			file = File.join(PATH, 'arts', "#{%w(cow squirrels killer_squirrels cat deer dog mouse camel turtle).sample}.art")
	end

	unless File.file?(file)
		colourize.call "Looks like the art file doesn't exist.\n"
		colourize.call "Type #{BASENAME} --download or #{BASENAME} -dl to download all the necessary files.\n"
		colourize.call "Type #{BASENAME} --show-arts or #{BASENAME} -sa to see available arts in the default directory...\n"
		colourize.call "Type #{BASENAME} --help or #{BASENAME} -h for help.\n"
		colourize.call "Type #{BASENAME} --art or #{BASENAME} -a for help regarding art.\n"
		file = File.join(PATH, "arts/#{%w(cow squirrels killer_squirrels cat deer dog mouse camel).sample}.art")

		unless File.readable?(file)
			colourize.("The default files at location #{PATH + 'arts/'} doesn't exist\n")
			colourize.("Please run #{BASENAME} -dl to download all the necessary files at #{PATH}\n")
			exit! ERR_FILE_NOT_FOUND
		end
	end

	# Check if pipe and output is redicred from another program, waste no time on gets if not. It can use huge amount of memory for huge files.
	text, pipe = '', false
	require 'timeout'
	Timeout.timeout(0.000_000_000_000_1) { pipe = STDIN.getc } rescue nil

	if pipe
		text.concat(pipe)
		text.concat(STDIN.readpartial(4096)) until STDIN.eof?
		text.strip!
	elsif ARGV.include?('--version') || ARGV.include?('-v')
		ARGV.delete('--version')
		ARGV.delete('-v')
		text = VERSION
	elsif ARGV.include?('--welcome') || ARGV.include?('-w')
		require 'socket'

		user = ENV['USER'] ? $-s + ENV['USER'].to_s.split.map!(&:capitalize).join : ''
		logname = ENV['LOGNAME'] ? "\n:: Logname: #{ENV['LOGNAME']}" : ''
		hostname = Socket.gethostname ? "\n:: Hostname: #{Socket.gethostname}" : ''
		ssh_connection = ENV['SSH_CONNECTION']
		ssh_connection = ssh_connection ? "\n:: SSH: #{ssh_connection}" : ''

		local_ip = Socket.ip_address_list.detect { |intf| intf.ipv4_private? }.then { |x| x ? x.ip? ? "\n:: Local IP: #{x.ip_unpack[0]}" : '' : '' }
		files = " (#{Dir.entries(Dir.pwd).drop(2).count} items)" rescue ''

		# We are not using any File.join because Linux always has "/" as File::SEPARATOR
		os = if File.readable?('/etc/os-release')
			"\n:: OS: #{IO.readlines('/etc/os-release').find { |line| line.start_with?('NAME=') }.split(?=).drop(1).join.strip.gsub!(?", '') } (#{RUBY_PLATFORM})"
		elsif File.readable?('/etc/lsb-release')
			"\n:: OS: #{IO.readlines('/etc/os-release').find { |line| line.start_with?('NAME=') }.split(?=).drop(1).join.strip.gsub!(?", '') } (#{RUBY_PLATFORM})"
		else
			''
		end

		memory_stat = if File.readable?('/proc/meminfo')
			suffix = UNIT == 1000 ? 'MB' : 'MiB'
			memory = IO.readlines('/proc/meminfo')

			used = (((total = memory[0].split[1].to_f) - (available = memory[2].split[1].to_f))/UNIT).round(2)
			val = "\n:: Memory: #{(used).round(2)} #{suffix} / #{(total/UNIT).round(2)} #{suffix} (#{used.*(100)./(total./(UNIT)).round(2)}%)"
		else
			''
		end

		swap_stat = if File.readable?('/proc/swaps')
			suffix = UNIT == 1000 ? 'MB' : 'MiB'
			used, total = *IO.readlines('/proc/swaps').drop(1).map! { |x| x.strip.split.values_at(2, 3).map!(&:to_f) }
				.then { |x| [x.map(&:last).sum./(UNIT).round(2), x.map(&:first).sum./(UNIT).round(2)] }

			total == 0 ? '' : "\n:: Swap: #{used} #{suffix} / #{total} #{suffix} (#{used.*(100)./(total).round(2)}%)"
		else
			''
		end

		require 'etc'
		cpu_stat = if File.readable?('/proc/cpuinfo')
			cpu = IO.readlines('/proc/cpuinfo')

			val = "\n:: CPU: #{cpu.find { |x| x.start_with?('model name') }.to_s.split(?:).drop(1).join.strip}"
			cpu_count = cpu.count { |x| x.start_with?('processor'.freeze) }.then { |x| x == Etc.nprocessors ? x : 0 }
			val.concat("\n:: CPU Cores: #{cpu_count}") unless cpu_count == 0
			val
		else
			"\n:: CPU Cores: #{Etc.nprocessors}"
		end

		cpu_usage = if File.readable?('/proc/stat')
			data = IO.foreach('/proc/stat').first.split.map!(&:to_f)
			Kernel.sleep(0.03)
			prev_data = IO.foreach('/proc/stat').first.split.map!(&:to_f)

			%w(user nice sys idle iowait irq softirq steal).each_with_index { |el, ind| binding.eval("@#{el}, @prev_#{el} = #{data[ind + 1]}, #{prev_data[ind + 1]}") }

			previdle, idle = @prev_idle + @prev_iowait, @idle + @iowait
			totald = idle + (@user + @nice + @sys + @irq + @softirq + @steal) -
				(previdle + (@prev_user + @prev_nice + @prev_sys + @prev_irq + @prev_softirq + @prev_steal))
			"\n:: Total CPU Usage: #{((totald - (idle - previdle)) / totald * 100).round(2).abs.then { |x| x.to_s == 'NaN' ? 0 : x }.abs}%"
		else
			''
		end

		terminal_size = STDOUT.tty? ? STDOUT.winsize.then { |x| x.sum != 0 ? "\n:: Terminal Size: #{x.join(" \xC3\x97 ")}" : '' } : ''
		kernel_version = File.readable?('/proc/version') ? "\n:: Kernel: " + IO.read('/proc/version').split[2] : ''

		uptime = File.readable?('/proc/uptime') ? IO.read('/proc/uptime').to_i : 0
		up = "#{uptime.div(3600).then { |x| x != 1 ? "#{x} hours" : "#{x} hour" }}, "\
			"#{uptime.%(3600).div(60).then { |x| x != 1 ? "#{x} minutes" : "#{x} minute" } }, "\
			"#{uptime.%(60).then { |x| x != 1 ? "#{x} seconds" : "#{x} second" } } "

		procfiles = Dir['/proc/**']
		running_processes = procfiles.select { |x| File.split(x)[1].then { |y| y.to_i.to_s == y } }
		total_tasks, tasks_info = running_processes.size, ''
		sleeping_count = idle_count = running_count = zombies_count = 0

		running_processes.each do |x|
			status_file = File.join(x, 'status'.freeze)

			if File.readable?(status_file)
				status = IO.readlines(status_file)
				status1, status2 = status[2].split[1], status[1].split[1]

				running_count += 1 if status1 == ?R.freeze
				sleeping_count += 1 if status1 == ?S.freeze
				idle_count += 1 if status1 == ?I.freeze
				zombies_count += 1 if status2 == ?Z.freeze
			end
		end

		if running_processes.size > 0
			tasks_info << "\n:: Tasks: #{total_tasks}"

			if running_count + sleeping_count + idle_count + zombies_count > 0
				tasks_info.concat("\n   [")
				tasks_info.concat("Running #{running_count},\s") if running_count > 0
				tasks_info.concat("Sleeping #{sleeping_count},\s") if sleeping_count > 0
				tasks_info.concat("Idle #{idle_count},\s") if idle_count > 0
				tasks_info.concat("Zombies #{zombies_count},\s") if zombies_count > 0
				tasks_info.delete_suffix!(",\s").concat(?])
			end
		end

		session = ENV['DESKTOP_SESSION'] ? "\n:: Desktop Session: #{ENV['DESKTOP_SESSION']}" : ''
		text = <<~EOF.rstrip
				>> Welcome#{user}!#{logname}#{hostname}#{ssh_connection}#{local_ip}#{session}#{os}#{kernel_version}#{cpu_stat}#{cpu_usage}#{memory_stat}#{swap_stat}
				:: Uptime: #{up}#{tasks_info}
				:: Shell: #{ENV['SHELL']}
				:: PWD: #{Dir.pwd}#{files}#{terminal_size}
				:: Date & Time: #{Time.new.strftime('%B %d, %A, %H:%M:%S %p')}
		EOF

	elsif text.empty?
		t = ARGV.select { |t| t.start_with?('--text=') || t.start_with?('-t=') }.each(&ARGV.method(:delete))

		text = if t.empty?
			if File.readable?(File.join(PATH, "fortunes.data"))
				IO.read(File.join(PATH, "fortunes.data")).split("\n%\n").sample.to_s.gsub($-n, $-s).strip
			else
				"The fortune file doesn't exist.\n\tPlease run #{BASENAME} -dl to download the files to #{PATH}"
			end
		else
			t[-1].to_s.split(?=)[1].then { |x| x ? x : '' }
		end

		read = ARGV.select { |r| r.start_with?('--read=') || r.start_with?('-r=') }
		read.each(&ARGV.method(:delete))

		unless read.empty?
			f = read[-1].split(?=)[1].to_s
			text = IO.read(f).strip if File.readable?(f)
		end

		net = ARGV.select { |n| n.start_with?('--net=') || n.start_with?('-n=') }
		net.each(&ARGV.method(:delete))

		unless net.empty?
			uri = net[-1].split(?=)[1].to_s.strip

			begin
				%w(net/https open-uri).each(&method(:require))
				text = Animate("Downloading data from #{uri}") { open(uri).read.strip }

			rescue SocketError, OpenSSL::SSL::SSLError
				colourize.call "Failed to read the URL. Do you have an active internet connection?\n"
				exit! ERR_NO_INTERNET

			rescue SystemExit, Interrupt
				show_art = true
				print "\n\n"

			rescue Errno::ENOENT
				puts colourize.call "No such file #{uri}... If you are trying to open a link, don't forget to mention the protocol..."
				puts colourize.call "For example, https://www.example.net"
				puts colourize.call "To open a file, you can use --read=<path> or --net=<path>"
				exit! ERR_FILE_NOT_FOUND

			rescue Exception
				colourize.call "Sorry an error occurred while trying to open #{uri}\n"
				colourize.call "Failed to open the URL. Have you mentioned the protocol?\n"
				colourize.call "Example:\n\thttp://www.example.net\n"
				exit! ERR_SITE_INACCESSIBLE
			end
		end
	end

	corners, all_chars = (borderh.empty? || borderv.empty?) ? Array.new(4) { $-s } : [' //', '\\\\', ' \\\\', '//'], ''

	if show_art && display_text
		text.prepend($-s).gsub!(?\t, $-s * 4)

		count, init, init_length, init_length_lower = 0, borderh * Terminal_Width, Terminal_Width - 1, Terminal_Width - 9
		all_chars.concat("#{corners[0]}#{init}#{corners[1]}\n #{borderv}")

		text.each_char do |c|
			unless (count >= init_length_lower && c== $-s) || count >= init_length || c == $-n
				all_chars.concat(c)
			else
				all_chars.concat((c == $-n ? fill_chars : c) + fill_chars * (init_length - count + 2) + borderv + "\n #{borderv} ")
				count = 0
			end

			count += 1
		end

		all_chars.concat(fill_chars * (init_length - count + 3) + borderv)
		animal = IO.readlines(file).drop(2)

		unless animal
			puts colourize.call "The art file #{File.zero?(file) ? 'looks empty' : 'is not properly formatted' }. Run cowspeak --art to get help regarding art."
			exit! ERR_BAD_FILE
		end

		max_length = animal.map(&:length).max / 2

		colourize.(all_chars + $-n + corners[2] + init + corners[3] + $-n +
			$-s * max_length + bubble * 3 + "\n\s" + $-s * max_length + bubble * 2 + $-n + $-s * max_length + bubble + $-n + animal.join)

	elsif show_art
		colourize.(IO.readlines(file).drop(2).join)
	elsif display_text
		puts colourize.(text)
	end

rescue SystemExit, Interrupt, SignalException
	abort $-n * 2
rescue Exception => e
	exception_handle.(e)
end
